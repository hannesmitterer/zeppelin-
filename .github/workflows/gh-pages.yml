name: Enhanced Build and Deploy to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  JEKYLL_ENV: production

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-success: ${{ steps.build-check.outputs.success }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better caching

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Use Ruby version compatible with GitHub Pages
          bundler-cache: true # Enable caching for bundler

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Check script permissions
        run: |
          echo "Checking script permissions..."
          find scripts -name "*.sh" -type f -exec ls -la {} \;
          
      - name: Set script permissions
        run: |
          echo "Setting script permissions..."
          find scripts -name "*.sh" -exec chmod +x {} \;
          chmod 700 scripts/deployment/deploy.sh
          
      - name: Install Jekyll dependencies
        run: |
          echo "Installing dependencies..."
          bundle install
          
      - name: Run tests
        run: |
          echo "Running test suite..."
          ./scripts/development/test.sh --build --html
          
      - name: Build Jekyll site
        id: build
        run: |
          echo "Building Jekyll site..."
          ./scripts/web/build.sh production
          
      - name: Verify build output
        id: build-check
        run: |
          if [[ -d "_site" ]] && [[ -f "_site/index.html" ]]; then
            echo "✅ Build successful"
            echo "success=true" >> $GITHUB_OUTPUT
            
            # Build statistics
            TOTAL_FILES=$(find _site -type f | wc -l)
            SITE_SIZE=$(du -sh _site | cut -f1)
            echo "📊 Build Statistics:"
            echo "Total files: $TOTAL_FILES"
            echo "Total size: $SITE_SIZE"
            
            # Create build manifest
            echo "{
              \"build_time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
              \"commit_sha\": \"$GITHUB_SHA\",
              \"total_files\": $TOTAL_FILES,
              \"site_size\": \"$SITE_SIZE\"
            }" > _site/build-manifest.json
            
          else
            echo "❌ Build failed - _site directory not created or missing index.html"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.build-success == 'true'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Deployment notification
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Build manifest: ${{ steps.deployment.outputs.page_url }}build-manifest.json"